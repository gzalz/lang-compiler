
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON EQUALS FN LBRACE LET LPAREN NUMBER PRINTLN RBRACE RPAREN STRING SYMBOLstatements : statement\n    | statements statementexpression : STRINGexpression : SYMBOLexpression : NUMBERstatement : SYMBOL LPAREN RPARENstatement : PRINTLN LPAREN expression RPARENstatement : LET SYMBOL COLON SYMBOL EQUALS expressionstatement : FN SYMBOL LPAREN RPAREN LBRACE statements RBRACEstatement : FN SYMBOL LPAREN SYMBOL COLON SYMBOL RPARENstatement : FN SYMBOL LPAREN RPAREN COLON SYMBOLstatement : FN SYMBOL LPAREN SYMBOL COLON SYMBOL RPAREN COLON SYMBOL'
    
_lr_action_items = {'SYMBOL':([0,1,2,5,6,7,9,12,14,15,16,17,18,19,23,24,25,26,27,29,30,31,32,33,34,],[3,3,-1,10,11,-2,15,-6,-3,-4,-5,20,21,-7,15,28,3,30,-8,3,-11,-10,-9,34,-12,]),'PRINTLN':([0,1,2,7,12,14,15,16,19,25,27,29,30,31,32,34,],[4,4,-1,-2,-6,-3,-4,-5,-7,4,-8,4,-11,-10,-9,-12,]),'LET':([0,1,2,7,12,14,15,16,19,25,27,29,30,31,32,34,],[5,5,-1,-2,-6,-3,-4,-5,-7,5,-8,5,-11,-10,-9,-12,]),'FN':([0,1,2,7,12,14,15,16,19,25,27,29,30,31,32,34,],[6,6,-1,-2,-6,-3,-4,-5,-7,6,-8,6,-11,-10,-9,-12,]),'$end':([1,2,7,12,14,15,16,19,27,30,31,32,34,],[0,-1,-2,-6,-3,-4,-5,-7,-8,-11,-10,-9,-12,]),'RBRACE':([2,7,12,14,15,16,19,27,29,30,31,32,34,],[-1,-2,-6,-3,-4,-5,-7,-8,32,-11,-10,-9,-12,]),'LPAREN':([3,4,11,],[8,9,18,]),'RPAREN':([8,13,14,15,16,18,28,],[12,19,-3,-4,-5,22,31,]),'STRING':([9,23,],[14,14,]),'NUMBER':([9,23,],[16,16,]),'COLON':([10,21,22,31,],[17,24,26,33,]),'EQUALS':([20,],[23,]),'LBRACE':([22,],[25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,25,],[1,29,]),'statement':([0,1,25,29,],[2,7,2,7,]),'expression':([9,23,],[13,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statement','statements',1,'p_statements','parser.py',22),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',23),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',31),
  ('expression -> SYMBOL','expression',1,'p_expression_symbol','parser.py',36),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',41),
  ('statement -> SYMBOL LPAREN RPAREN','statement',3,'p_statement_fn0_invoke','parser.py',46),
  ('statement -> PRINTLN LPAREN expression RPAREN','statement',4,'p_statement_println','parser.py',51),
  ('statement -> LET SYMBOL COLON SYMBOL EQUALS expression','statement',6,'p_statement_let','parser.py',57),
  ('statement -> FN SYMBOL LPAREN RPAREN LBRACE statements RBRACE','statement',7,'p_statement_fn_0_void','parser.py',68),
  ('statement -> FN SYMBOL LPAREN SYMBOL COLON SYMBOL RPAREN','statement',7,'p_statement_fn_1_void','parser.py',73),
  ('statement -> FN SYMBOL LPAREN RPAREN COLON SYMBOL','statement',6,'p_statement_fn_0','parser.py',78),
  ('statement -> FN SYMBOL LPAREN SYMBOL COLON SYMBOL RPAREN COLON SYMBOL','statement',9,'p_statement_fn_1','parser.py',83),
]
